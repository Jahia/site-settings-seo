version: 2.1

orbs:
  docker: circleci/docker@0.5.20

# Parameters are available across the entire config file and can be used with this syntax: << pipeline.parameters.THE_PARAMETER >>
# Avoid using project-specific variables in the jobs or steps.
# Instead, declare those as pipeline parameters (At the top of the config file).
# This eases portability of the config file across different modules
parameters:
  AUDITCI_LEVEL:
    type: string
    default: "moderate"
  TESTS_PATH:
    type: string
    default: "tests/"
  TESTS_IMAGE:
    type: string
    default: "jahia/site-settings-seo"
  TESTRAIL_PROJECTNAME:
    type: string
    default: "Site Settings SEO Module"
  GITHUB_SLUG:
    type: string
    default: "jahia/site-settings-seo"
  MODULE_ID:
    type: string
    default: "site-settings-seo"
  PRIMARY_RELEASE_BRANCH:
    type: string
    default: "master"
  RELEASE_ID:
    type: string
    default: ""
  RELEASE_VERSION:
    type: string
    default: ""
  IS_RELEASE:
    type: boolean
    default: false
  UPDATE_SIGNATURE:
    type: boolean
    default: false

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  # This job is there to prepare the repo for the next steps
  initialize:
    <<: *workdir
    docker:
      - image: cimg/node:14.15
    steps:
      - checkout
      - *persist-workspace

  checkout:
    <<: *workdir
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - *persist-workspace

  # Build the module and save it locally
  # We're saving the artifacts that are then used later on to execute the tests
  # The artifacts are also stored and made available through circleci UI if further investigations are necessary
  build:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - run: mvn -s .circleci/.circleci.settings.xml clean install
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      # Environment provisioning is sometimes dependent upon dependencies build during mvn clean install
      # This step copies those dependencies and make them available for further actions,
      # such as being used to provision a running Jahia with a set of freshly built artifacts
      - run: mvn -s .circleci/.circleci.settings.xml dependency:copy-dependencies
      - run:
          name: Prepare artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
      - *persist-workspace

  # This job publish the artifact to nexus by calling the deploy command
  # It is only executed when merging into master (after successful PR execution)
  publish:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn -s .circleci/.circleci.settings.xml clean install deploy

  sonar:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:11-jdk-stretch
    resource_class: medium
    steps:
      - *attach-workspace
      - checkout
      - restore_cache:
          keys:
            - sonar-dependencies-{{ checksum "pom.xml" }}
            # Fallback if no exact match found
            - sonar-dependencies-
      # We're executing different actions depending fi the job was triggered by a PR or if it was triggered on branch
      # If the branch was not triggered by a PR, the CIRCLE_PULL_REQUEST variable will be empty
      - run:
          name: Sonar Release branch analysis
          environment:
            DEPENDENCY_CHECK_SETTINGS: -DfailOnError=false -DskipProvidedScope=true -DskipTestScope=false -Dformats=HTML,JSON
              -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json
              -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html
              -DretireJsAnalyzerEnabled=false -DnodeAnalyzerEnabled=false
          command: |
            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]; then
              # echo "Git custom command to fix circle-ci checkout for sonar analysis"
              git fetch --all
              git branch -D << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
              git rev-parse origin/<< pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
              echo "Executing a PR based analysis"
              mvn -s .circleci/.circleci.settings.xml sonar:sonar \
                  -Dsonar.projectKey=<< pipeline.parameters.MODULE_ID >> \
                  -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
                  -Dsonar.pullrequest.base=<< pipeline.parameters.PRIMARY_RELEASE_BRANCH >> \
                  -Dsonar.pullrequest.github.repository=<< pipeline.parameters.GITHUB_SLUG >>
            elif [[ "$CIRCLE_BRANCH" == << pipeline.parameters.PRIMARY_RELEASE_BRANCH >> ]]; then
              echo "Executing an analysis on the main branch"
              mvn -s .circleci/.circleci.settings.xml dependency-check:aggregate sonar:sonar \
                  -Dsonar.projectKey=<< pipeline.parameters.MODULE_ID >> $DEPENDENCY_CHECK_SETTINGS
            else
              echo "Executing an analysis on branch: $CIRCLE_BRANCH"
              mvn -s .circleci/.circleci.settings.xml dependency-check:aggregate sonar:sonar \
                  -Dsonar.branch.name=$CIRCLE_BRANCH $DEPENDENCY_CHECK_SETTINGS
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: sonar-dependencies-{{ checksum "pom.xml" }}

  generate-changelog:
    <<: *workdir
    docker: # run the steps with Docker
      - image: cimg/node:14.15
    resource_class: xlarge
    steps:
      - checkout
      - *attach-workspace
      - add_ssh_keys:
          fingerprints:
            - "71:4f:fc:0c:0a:01:a7:3b:df:50:e2:6c:12:14:9f:d7"
      - run:
          name: Setting up github configuration
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Update Changelog
          command: |
            yarn
            yarn add auto
            GH_TOKEN=${GITHUB_API_TOKEN} yarn auto changelog
            git push --set-upstream origin $CIRCLE_BRANCH
      - *persist-workspace

  release:
    <<: *workdir
    docker: # run the steps with Docker
      - image: cimg/openjdk:8.0.275-node
    resource_class: xlarge
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "71:4f:fc:0c:0a:01:a7:3b:df:50:e2:6c:12:14:9f:d7"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Delete github tag <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
            git tag --delete <<pipeline.parameters.RELEASE_VERSION>>
            git push --delete origin <<pipeline.parameters.RELEASE_VERSION>>
      - run:
          name: Release prepare version for <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            FINAL_RELEASE_VERSION=$(echo <<pipeline.parameters.RELEASE_VERSION>> | cut -d'-' -f 1)
            MAJOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f1`
            MINOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f2`
            REVISION=`echo $FINAL_RELEASE_VERSION | cut -d. -f3`

            if [[ "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" == "master"  || "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" == "main"  ||  "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" =~ ^[0-9]_x$ ]]; then
             NEXT_MINOR_VERSION=`expr $MINOR_VERSION + 1`
             NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$NEXT_MINOR_VERSION.0"-SNAPSHOT
            else
              NEXT_REVISION=`expr $REVISION + 1`
              NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
            fi

            mvn -s .circleci/.circleci.settings.xml -B -Dtag=$FINAL_RELEASE_VERSION release:prepare -DreleaseVersion=$FINAL_RELEASE_VERSION -DdevelopmentVersion="$NEXT_DEVELOPMENT_VERSION"
      - run:
          name: Update github release for id << pipeline.parameters.RELEASE_ID >>
          command: |
            curl -X PATCH \
            -H "Accept:application/vnd.github.v3+json" \
            -d "{\"tag_name\":\"<<pipeline.parameters.RELEASE_VERSION>>\", \"prerelease\": false, \"draft\": false}" -u \
            jahia-ci:$GITHUB_API_TOKEN https://api.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>
      - run:
          name: Perform release
          command: |
            mvn -s .circleci/.circleci.settings.xml release:perform -Prelease-to-staging-repository -DscmCommentPrefix="[skip ci] [maven-release-plugin]"
      - run:
          name: Copy artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/

  # This job runs when the MAJOR and/or MINOR version of the pom updates. If so, it will
  # update the signature in the pom file(s) ( if there's multiple submodules) and push the
  # changes to the remote branch (i.e Github)
  # It is fully containerized
  update-signature:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275-node
    resource_class: large
    parameters:
      KEYMAKER_VERSION:
        type: string
        default: "2.0"
      KEYMAKER_LOCATION:
        type: string
        default: "org/jahia/keymaker/keymaker-cli"
      KEYMAKER_NAME:
        type: string
        default: "keymaker-cli"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "71:4f:fc:0c:0a:01:a7:3b:df:50:e2:6c:12:14:9f:d7"
      - run:
          name: Setting up github configuration
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            echo "Handling if this job was re-ran"
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Downloading keymaker artifacts
          command: |
            source .circleci/update-signature.sh
            url="${NEXUS_ENTERPRISE_RELEASES_URL}/content/<<parameters.KEYMAKER_LOCATION>>/<<parameters.KEYMAKER_VERSION>>/<<parameters.KEYMAKER_NAME>>-<<parameters.KEYMAKER_VERSION>>-jar-with-dependencies.jar"
            download_location='target/keymaker'
            artifact_name=<<parameters.KEYMAKER_NAME>>
            downloadArtifact ${NEXUS_USERNAME} ${NEXUS_PASSWORD} ${url} ${download_location} ${artifact_name}
            KEYMAKER_CLI_JAR="$(pwd)/${download_location}/${artifact_name}.jar"
            echo "export KEYMAKER_CLI_JAR=${KEYMAKER_CLI_JAR}" >> $BASH_ENV
            . $BASH_ENV
      - run:
          name: Update Signature
          command: |
            source .circleci/update-signature.sh
            handleSignatureUpdate $(pwd) ${KEYMAKER_CLI_JAR}
            [[ $(git update-index --refresh | grep -c "needs update") -ne 0 ]] \
            && echo "Signature updated. Pushing changes to remote repository" \
            && git ls-files | grep pom.xml | xargs git add \
            && git commit -am "Updated signature" \
            && git push origin ${CIRCLE_BRANCH} \
            || echo "No need to update the pom file"

workflows:
  version: 2
  # On code change is executed each time new code is pushed to a branch
  # Current project configuration in circleci only builds on PR + main, so effectively this is only being executed
  on-code-change:
    unless: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - initialize
      - build:
          context: QA_ENVIRONMENT
          requires:
            - initialize
      - sonar:
          context: QA_ENVIRONMENT
          requires:
            - build
      - publish:
          context: QA_ENVIRONMENT
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>

  # The on-release workflow was created to handle the full release lifecycle after creating a release using GitHub
  # https://github.com/Jahia/sandbox/releases
  # The release is first created using the "pre-release" tag and a pipeline is triggered from a GitHub action
  # This pipeline perform the following action:
  # - Delete the tag created by GitHub (unnecessary)
  # - Run mvn release:prepare
  # - Run mvn release:perform
  on-release:
    when: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - initialize
      - generate-changelog:
          context: QA_ENVIRONMENT
          requires:
            - initialize
      - release:
          context: QA_ENVIRONMENT
          requires:
            - generate-changelog
      - update-signature:
          pre-steps:
            - checkout
            - run:
                name: Verifying if signature needs to be updated
                command: |
                  commit_message=$(git log -1 HEAD --pretty=format:%s)
                  if [[ $commit_message != *"[ci sign]"* \
                     && $commit_message != *"[sign ci]"* \
                     && $commit_message != *"[jahia update signature]"* ]]; then
                    echo "Signature update has not been requested. Proceeding without updating the signature"
                    circleci-agent step halt
                  fi
          context: QA_ENVIRONMENT
          requires:
            - build
